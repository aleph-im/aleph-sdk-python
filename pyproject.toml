[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "aleph-sdk-python"
dynamic = ["version"]
description = "Lightweight Python Client library for the Aleph.im network"
readme = "README.md"
license = { file = "LICENSE.txt" }
authors = [
    { name = "Aleph.im Team", email = "hello@aleph.im" },
]
classifiers = [
    "Programming Language :: Python :: 3",
    "Development Status :: 4 - Beta",
    "Framework :: aiohttp",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "aiohttp>=3.8.3",
    "aleph-message~=0.4.3",
    "coincurve; python_version<\"3.11\"",
    "coincurve>=17.0.0; python_version>=\"3.11\"",
    "eciespy; python_version<\"3.11\"",
    "eciespy>=0.3.13; python_version>=\"3.11\"",
    "eth_abi>=4.0.0; python_version>=\"3.11\"",
    "eth_account>=0.4.0",
    "python-magic",
    "typer",
    "typing_extensions",
]

[project.optional-dependencies]
cosmos = [
    "cosmospy",
]
dns = [
    "aiodns",
]
docs = [
    "sphinxcontrib-plantuml",
]
ethereum = [
    "eth_abi>=4.0.0; python_version>=\"3.11\"",
    "eth_account>=0.4.0",
]
ledger = [
    "ledgereth==0.9.0",
]
mqtt = [
    "aiomqtt<=0.1.3",
    "certifi",
    "Click",
]
nuls2 = [
    "aleph-nuls2",
]
polkadot = [
    "py-sr25519-bindings",
    "substrate-interface",
]
solana = [
    "base58",
    "pynacl",
]
testing = [
    "aiodns",
    "aiomqtt<=0.1.3",
    "aleph-pytezos==0.1.1",
    "base58",
    "black",
    "eth_abi>=4.0.0; python_version>=\"3.11\"",
    "eth_account>=0.4.0",
    "fastapi",
    "flake8",
    "Flake8-pyproject",
    "httpx",
    "isort",
    "ledgereth==0.9.0",
    "mypy",
    "mypy-extensions",
    "psutil",
    "py-sr25519-bindings",
    "pynacl",
    "pytest",
    "pytest-asyncio",
    "pytest-cov",
    "pytest-mock",
    "requests",
    "secp256k1",
    "substrate-interface",
    "types-certifi",
    "types-setuptools",
]
tezos = [
    "aleph-pytezos==0.1.1",
    "pynacl",
]

[project.urls]
Documentation = "https://aleph.im/"
Homepage = "https://github.com/aleph-im/aleph-sdk-python"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = [
    "src/aleph",
    "pyproject.toml",
    "README.md",
    "LICENSE.txt",
]

[tool.hatch.build.targets.sdist]
include = [
    "src/aleph",
    "pyproject.toml",
    "README.md",
    "LICENSE.txt",
]

[tool.pytest.ini_options]
addopts = "--cov=aleph.sdk --cov-report=term-missing --verbose -m \"not ledger_hardware\""
norecursedirs = ["dist", "build", ".tox"]
testpaths = ["tests"]
markers = {ledger_hardware = "marks tests as requiring ledger hardware"}

[tool.flake8]
exclude = [".tox", "build", "dist", ".eggs", "docs/conf.py"]
ignore = ["E501", "W291", "W503", "E203", "E704"]

[tool.isort]
profile = "black"

[tool.hatch.envs.testing]
dependencies = [
    "pytest==8.0.1",
    "pytest-cov==4.1.0",
    "pytest-mock==3.12.0",
    "pytest-asyncio==0.23.5",
]
[tool.hatch.envs.testing.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov {args:tests}"
cov-report = [
    "- coverage combine",
    "coverage report",
]
cov = [
    "test-cov",
    "cov-report",
]

[[tool.hatch.envs.all.matrix]]
python = ["3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
    "black==24.1.1",
    "mypy==1.8.0",
    "mypy-extensions==0.4.3",
    "ruff==0.1.15",
    "isort==5.13.2",
]
[tool.hatch.envs.lint.scripts]
typing = "mypy {args:src/aleph/vm/ tests/ examples/example_fastapi runtimes/aleph-debian-12-python}"
style = [
    #  "ruff {args:.}",
    "black --check --diff {args:.}",
    "isort --check-only --profile black {args:.}",
]
fmt = [
    "black {args:.}",
    #  "ruff --fix {args:.}",
    "isort --profile black {args:.}",
    "style",
]
all = [
    "style",
    "typing",
]

[tool.mypy]
python_version = 3.8
mypy_path = "src"
exclude = [
    "conftest.py"
]
show_column_numbers = true

# Import discovery
# Install types for third-party library stubs (e.g. from typeshed repository)
install_types = true
non_interactive = true
# Suppresses error messages about imports that cannot be resolved (no py.typed file, no stub file, etc).
ignore_missing_imports = true
# Don't follow imports
follow_imports = "silent"


# Miscellaneous strictness flags
# Allows variables to be redefined with an arbitrary type, as long as the redefinition is in the same block and nesting level as the original definition.
allow_redefinition = true
